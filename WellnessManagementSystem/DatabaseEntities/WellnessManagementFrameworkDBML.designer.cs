#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseEntities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WellnessManagementFrameworkDB")]
	public partial class WellnessManagementFrameworkDBMLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategoryMaster(CategoryMaster instance);
    partial void UpdateCategoryMaster(CategoryMaster instance);
    partial void DeleteCategoryMaster(CategoryMaster instance);
    partial void InsertUserReportField(UserReportField instance);
    partial void UpdateUserReportField(UserReportField instance);
    partial void DeleteUserReportField(UserReportField instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertDietPlanReport(DietPlanReport instance);
    partial void UpdateDietPlanReport(DietPlanReport instance);
    partial void DeleteDietPlanReport(DietPlanReport instance);
    partial void InsertLabReport(LabReport instance);
    partial void UpdateLabReport(LabReport instance);
    partial void DeleteLabReport(LabReport instance);
    partial void InsertOccupationMaster(OccupationMaster instance);
    partial void UpdateOccupationMaster(OccupationMaster instance);
    partial void DeleteOccupationMaster(OccupationMaster instance);
    partial void InsertOccupationReportField(OccupationReportField instance);
    partial void UpdateOccupationReportField(OccupationReportField instance);
    partial void DeleteOccupationReportField(OccupationReportField instance);
    partial void InsertPhysicalConditionReport(PhysicalConditionReport instance);
    partial void UpdatePhysicalConditionReport(PhysicalConditionReport instance);
    partial void DeletePhysicalConditionReport(PhysicalConditionReport instance);
    partial void InsertReportFieldMaster(ReportFieldMaster instance);
    partial void UpdateReportFieldMaster(ReportFieldMaster instance);
    partial void DeleteReportFieldMaster(ReportFieldMaster instance);
    partial void InsertReportTypeMaster(ReportTypeMaster instance);
    partial void UpdateReportTypeMaster(ReportTypeMaster instance);
    partial void DeleteReportTypeMaster(ReportTypeMaster instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public WellnessManagementFrameworkDBMLDataContext() : 
				base(global::DatabaseEntities.Properties.Settings.Default.WellnessManagementFrameworkDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WellnessManagementFrameworkDBMLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WellnessManagementFrameworkDBMLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WellnessManagementFrameworkDBMLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WellnessManagementFrameworkDBMLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CategoryMaster> CategoryMasters
		{
			get
			{
				return this.GetTable<CategoryMaster>();
			}
		}
		
		public System.Data.Linq.Table<UserReportField> UserReportFields
		{
			get
			{
				return this.GetTable<UserReportField>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<DietPlanReport> DietPlanReports
		{
			get
			{
				return this.GetTable<DietPlanReport>();
			}
		}
		
		public System.Data.Linq.Table<LabReport> LabReports
		{
			get
			{
				return this.GetTable<LabReport>();
			}
		}
		
		public System.Data.Linq.Table<OccupationMaster> OccupationMasters
		{
			get
			{
				return this.GetTable<OccupationMaster>();
			}
		}
		
		public System.Data.Linq.Table<OccupationReportField> OccupationReportFields
		{
			get
			{
				return this.GetTable<OccupationReportField>();
			}
		}
		
		public System.Data.Linq.Table<PhysicalConditionReport> PhysicalConditionReports
		{
			get
			{
				return this.GetTable<PhysicalConditionReport>();
			}
		}
		
		public System.Data.Linq.Table<ReportFieldMaster> ReportFieldMasters
		{
			get
			{
				return this.GetTable<ReportFieldMaster>();
			}
		}
		
		public System.Data.Linq.Table<ReportTypeMaster> ReportTypeMasters
		{
			get
			{
				return this.GetTable<ReportTypeMaster>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryMaster")]
	public partial class CategoryMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _CategoryName;
		
		private EntitySet<Client> _Clients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public CategoryMaster()
		{
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryMaster_Client", Storage="_Clients", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.CategoryMaster = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.CategoryMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserReportField")]
	public partial class UserReportField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserReportFieldID;
		
		private int _UserID;
		
		private int _ReportFieldID;
		
		private EntityRef<ReportFieldMaster> _ReportFieldMaster;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserReportFieldIDChanging(int value);
    partial void OnUserReportFieldIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnReportFieldIDChanging(int value);
    partial void OnReportFieldIDChanged();
    #endregion
		
		public UserReportField()
		{
			this._ReportFieldMaster = default(EntityRef<ReportFieldMaster>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserReportFieldID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserReportFieldID
		{
			get
			{
				return this._UserReportFieldID;
			}
			set
			{
				if ((this._UserReportFieldID != value))
				{
					this.OnUserReportFieldIDChanging(value);
					this.SendPropertyChanging();
					this._UserReportFieldID = value;
					this.SendPropertyChanged("UserReportFieldID");
					this.OnUserReportFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportFieldID", DbType="Int NOT NULL")]
		public int ReportFieldID
		{
			get
			{
				return this._ReportFieldID;
			}
			set
			{
				if ((this._ReportFieldID != value))
				{
					if (this._ReportFieldMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportFieldIDChanging(value);
					this.SendPropertyChanging();
					this._ReportFieldID = value;
					this.SendPropertyChanged("ReportFieldID");
					this.OnReportFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportFieldMaster_UserReportField", Storage="_ReportFieldMaster", ThisKey="ReportFieldID", OtherKey="ReportFieldID", IsForeignKey=true)]
		public ReportFieldMaster ReportFieldMaster
		{
			get
			{
				return this._ReportFieldMaster.Entity;
			}
			set
			{
				ReportFieldMaster previousValue = this._ReportFieldMaster.Entity;
				if (((previousValue != value) 
							|| (this._ReportFieldMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportFieldMaster.Entity = null;
						previousValue.UserReportFields.Remove(this);
					}
					this._ReportFieldMaster.Entity = value;
					if ((value != null))
					{
						value.UserReportFields.Add(this);
						this._ReportFieldID = value.ReportFieldID;
					}
					else
					{
						this._ReportFieldID = default(int);
					}
					this.SendPropertyChanged("ReportFieldMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserReportField", Storage="_User", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserReportFields.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserReportFields.Add(this);
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientID;
		
		private string _ClientName;
		
		private string _ClientPhone;
		
		private string _ClientAddress;
		
		private int _UserID;
		
		private int _CategoryID;
		
		private EntitySet<DietPlanReport> _DietPlanReports;
		
		private EntitySet<LabReport> _LabReports;
		
		private EntitySet<PhysicalConditionReport> _PhysicalConditionReports;
		
		private EntityRef<CategoryMaster> _CategoryMaster;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnClientPhoneChanging(string value);
    partial void OnClientPhoneChanged();
    partial void OnClientAddressChanging(string value);
    partial void OnClientAddressChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    #endregion
		
		public Client()
		{
			this._DietPlanReports = new EntitySet<DietPlanReport>(new Action<DietPlanReport>(this.attach_DietPlanReports), new Action<DietPlanReport>(this.detach_DietPlanReports));
			this._LabReports = new EntitySet<LabReport>(new Action<LabReport>(this.attach_LabReports), new Action<LabReport>(this.detach_LabReports));
			this._PhysicalConditionReports = new EntitySet<PhysicalConditionReport>(new Action<PhysicalConditionReport>(this.attach_PhysicalConditionReports), new Action<PhysicalConditionReport>(this.detach_PhysicalConditionReports));
			this._CategoryMaster = default(EntityRef<CategoryMaster>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientPhone", DbType="VarChar(15)")]
		public string ClientPhone
		{
			get
			{
				return this._ClientPhone;
			}
			set
			{
				if ((this._ClientPhone != value))
				{
					this.OnClientPhoneChanging(value);
					this.SendPropertyChanging();
					this._ClientPhone = value;
					this.SendPropertyChanged("ClientPhone");
					this.OnClientPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientAddress", DbType="NVarChar(MAX)")]
		public string ClientAddress
		{
			get
			{
				return this._ClientAddress;
			}
			set
			{
				if ((this._ClientAddress != value))
				{
					this.OnClientAddressChanging(value);
					this.SendPropertyChanging();
					this._ClientAddress = value;
					this.SendPropertyChanged("ClientAddress");
					this.OnClientAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._CategoryMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_DietPlanReport", Storage="_DietPlanReports", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<DietPlanReport> DietPlanReports
		{
			get
			{
				return this._DietPlanReports;
			}
			set
			{
				this._DietPlanReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_LabReport", Storage="_LabReports", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<LabReport> LabReports
		{
			get
			{
				return this._LabReports;
			}
			set
			{
				this._LabReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_PhysicalConditionReport", Storage="_PhysicalConditionReports", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<PhysicalConditionReport> PhysicalConditionReports
		{
			get
			{
				return this._PhysicalConditionReports;
			}
			set
			{
				this._PhysicalConditionReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryMaster_Client", Storage="_CategoryMaster", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public CategoryMaster CategoryMaster
		{
			get
			{
				return this._CategoryMaster.Entity;
			}
			set
			{
				CategoryMaster previousValue = this._CategoryMaster.Entity;
				if (((previousValue != value) 
							|| (this._CategoryMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryMaster.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._CategoryMaster.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("CategoryMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Client", Storage="_User", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DietPlanReports(DietPlanReport entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_DietPlanReports(DietPlanReport entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_LabReports(LabReport entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_LabReports(LabReport entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_PhysicalConditionReports(PhysicalConditionReport entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_PhysicalConditionReports(PhysicalConditionReport entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DietPlanReport")]
	public partial class DietPlanReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DietPlanReportID;
		
		private System.DateTime _TestDate;
		
		private int _ReportFieldID;
		
		private string _ReportFieldValue;
		
		private int _ClientID;
		
		private int _UserID;
		
		private string _Suggestions;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<ReportFieldMaster> _ReportFieldMaster;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDietPlanReportIDChanging(int value);
    partial void OnDietPlanReportIDChanged();
    partial void OnTestDateChanging(System.DateTime value);
    partial void OnTestDateChanged();
    partial void OnReportFieldIDChanging(int value);
    partial void OnReportFieldIDChanged();
    partial void OnReportFieldValueChanging(string value);
    partial void OnReportFieldValueChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnSuggestionsChanging(string value);
    partial void OnSuggestionsChanged();
    #endregion
		
		public DietPlanReport()
		{
			this._Client = default(EntityRef<Client>);
			this._ReportFieldMaster = default(EntityRef<ReportFieldMaster>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DietPlanReportID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DietPlanReportID
		{
			get
			{
				return this._DietPlanReportID;
			}
			set
			{
				if ((this._DietPlanReportID != value))
				{
					this.OnDietPlanReportIDChanging(value);
					this.SendPropertyChanging();
					this._DietPlanReportID = value;
					this.SendPropertyChanged("DietPlanReportID");
					this.OnDietPlanReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestDate", DbType="Date NOT NULL")]
		public System.DateTime TestDate
		{
			get
			{
				return this._TestDate;
			}
			set
			{
				if ((this._TestDate != value))
				{
					this.OnTestDateChanging(value);
					this.SendPropertyChanging();
					this._TestDate = value;
					this.SendPropertyChanged("TestDate");
					this.OnTestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportFieldID", DbType="Int NOT NULL")]
		public int ReportFieldID
		{
			get
			{
				return this._ReportFieldID;
			}
			set
			{
				if ((this._ReportFieldID != value))
				{
					if (this._ReportFieldMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportFieldIDChanging(value);
					this.SendPropertyChanging();
					this._ReportFieldID = value;
					this.SendPropertyChanged("ReportFieldID");
					this.OnReportFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportFieldValue", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ReportFieldValue
		{
			get
			{
				return this._ReportFieldValue;
			}
			set
			{
				if ((this._ReportFieldValue != value))
				{
					this.OnReportFieldValueChanging(value);
					this.SendPropertyChanging();
					this._ReportFieldValue = value;
					this.SendPropertyChanged("ReportFieldValue");
					this.OnReportFieldValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suggestions", DbType="NVarChar(MAX)")]
		public string Suggestions
		{
			get
			{
				return this._Suggestions;
			}
			set
			{
				if ((this._Suggestions != value))
				{
					this.OnSuggestionsChanging(value);
					this.SendPropertyChanging();
					this._Suggestions = value;
					this.SendPropertyChanged("Suggestions");
					this.OnSuggestionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_DietPlanReport", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.DietPlanReports.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.DietPlanReports.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportFieldMaster_DietPlanReport", Storage="_ReportFieldMaster", ThisKey="ReportFieldID", OtherKey="ReportFieldID", IsForeignKey=true)]
		public ReportFieldMaster ReportFieldMaster
		{
			get
			{
				return this._ReportFieldMaster.Entity;
			}
			set
			{
				ReportFieldMaster previousValue = this._ReportFieldMaster.Entity;
				if (((previousValue != value) 
							|| (this._ReportFieldMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportFieldMaster.Entity = null;
						previousValue.DietPlanReports.Remove(this);
					}
					this._ReportFieldMaster.Entity = value;
					if ((value != null))
					{
						value.DietPlanReports.Add(this);
						this._ReportFieldID = value.ReportFieldID;
					}
					else
					{
						this._ReportFieldID = default(int);
					}
					this.SendPropertyChanged("ReportFieldMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DietPlanReport", Storage="_User", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.DietPlanReports.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.DietPlanReports.Add(this);
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabReport")]
	public partial class LabReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LabReportID;
		
		private System.DateTime _TestDate;
		
		private int _ReportFieldID;
		
		private string _ReportFieldValue;
		
		private int _ClientID;
		
		private int _UserID;
		
		private string _Remark1;
		
		private string _Remark2;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<ReportFieldMaster> _ReportFieldMaster;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLabReportIDChanging(int value);
    partial void OnLabReportIDChanged();
    partial void OnTestDateChanging(System.DateTime value);
    partial void OnTestDateChanged();
    partial void OnReportFieldIDChanging(int value);
    partial void OnReportFieldIDChanged();
    partial void OnReportFieldValueChanging(string value);
    partial void OnReportFieldValueChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnRemark1Changing(string value);
    partial void OnRemark1Changed();
    partial void OnRemark2Changing(string value);
    partial void OnRemark2Changed();
    #endregion
		
		public LabReport()
		{
			this._Client = default(EntityRef<Client>);
			this._ReportFieldMaster = default(EntityRef<ReportFieldMaster>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabReportID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LabReportID
		{
			get
			{
				return this._LabReportID;
			}
			set
			{
				if ((this._LabReportID != value))
				{
					this.OnLabReportIDChanging(value);
					this.SendPropertyChanging();
					this._LabReportID = value;
					this.SendPropertyChanged("LabReportID");
					this.OnLabReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestDate", DbType="Date NOT NULL")]
		public System.DateTime TestDate
		{
			get
			{
				return this._TestDate;
			}
			set
			{
				if ((this._TestDate != value))
				{
					this.OnTestDateChanging(value);
					this.SendPropertyChanging();
					this._TestDate = value;
					this.SendPropertyChanged("TestDate");
					this.OnTestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportFieldID", DbType="Int NOT NULL")]
		public int ReportFieldID
		{
			get
			{
				return this._ReportFieldID;
			}
			set
			{
				if ((this._ReportFieldID != value))
				{
					if (this._ReportFieldMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportFieldIDChanging(value);
					this.SendPropertyChanging();
					this._ReportFieldID = value;
					this.SendPropertyChanged("ReportFieldID");
					this.OnReportFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportFieldValue", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ReportFieldValue
		{
			get
			{
				return this._ReportFieldValue;
			}
			set
			{
				if ((this._ReportFieldValue != value))
				{
					this.OnReportFieldValueChanging(value);
					this.SendPropertyChanging();
					this._ReportFieldValue = value;
					this.SendPropertyChanged("ReportFieldValue");
					this.OnReportFieldValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark1", DbType="NVarChar(MAX)")]
		public string Remark1
		{
			get
			{
				return this._Remark1;
			}
			set
			{
				if ((this._Remark1 != value))
				{
					this.OnRemark1Changing(value);
					this.SendPropertyChanging();
					this._Remark1 = value;
					this.SendPropertyChanged("Remark1");
					this.OnRemark1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark2", DbType="NVarChar(MAX)")]
		public string Remark2
		{
			get
			{
				return this._Remark2;
			}
			set
			{
				if ((this._Remark2 != value))
				{
					this.OnRemark2Changing(value);
					this.SendPropertyChanging();
					this._Remark2 = value;
					this.SendPropertyChanged("Remark2");
					this.OnRemark2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_LabReport", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.LabReports.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.LabReports.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportFieldMaster_LabReport", Storage="_ReportFieldMaster", ThisKey="ReportFieldID", OtherKey="ReportFieldID", IsForeignKey=true)]
		public ReportFieldMaster ReportFieldMaster
		{
			get
			{
				return this._ReportFieldMaster.Entity;
			}
			set
			{
				ReportFieldMaster previousValue = this._ReportFieldMaster.Entity;
				if (((previousValue != value) 
							|| (this._ReportFieldMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportFieldMaster.Entity = null;
						previousValue.LabReports.Remove(this);
					}
					this._ReportFieldMaster.Entity = value;
					if ((value != null))
					{
						value.LabReports.Add(this);
						this._ReportFieldID = value.ReportFieldID;
					}
					else
					{
						this._ReportFieldID = default(int);
					}
					this.SendPropertyChanged("ReportFieldMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LabReport", Storage="_User", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.LabReports.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.LabReports.Add(this);
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OccupationMaster")]
	public partial class OccupationMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OccupationID;
		
		private string _OccupationName;
		
		private EntitySet<OccupationReportField> _OccupationReportFields;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOccupationIDChanging(int value);
    partial void OnOccupationIDChanged();
    partial void OnOccupationNameChanging(string value);
    partial void OnOccupationNameChanged();
    #endregion
		
		public OccupationMaster()
		{
			this._OccupationReportFields = new EntitySet<OccupationReportField>(new Action<OccupationReportField>(this.attach_OccupationReportFields), new Action<OccupationReportField>(this.detach_OccupationReportFields));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OccupationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OccupationID
		{
			get
			{
				return this._OccupationID;
			}
			set
			{
				if ((this._OccupationID != value))
				{
					this.OnOccupationIDChanging(value);
					this.SendPropertyChanging();
					this._OccupationID = value;
					this.SendPropertyChanged("OccupationID");
					this.OnOccupationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OccupationName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string OccupationName
		{
			get
			{
				return this._OccupationName;
			}
			set
			{
				if ((this._OccupationName != value))
				{
					this.OnOccupationNameChanging(value);
					this.SendPropertyChanging();
					this._OccupationName = value;
					this.SendPropertyChanged("OccupationName");
					this.OnOccupationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OccupationMaster_OccupationReportField", Storage="_OccupationReportFields", ThisKey="OccupationID", OtherKey="OccupationID")]
		public EntitySet<OccupationReportField> OccupationReportFields
		{
			get
			{
				return this._OccupationReportFields;
			}
			set
			{
				this._OccupationReportFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OccupationMaster_User", Storage="_Users", ThisKey="OccupationID", OtherKey="OccupationID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OccupationReportFields(OccupationReportField entity)
		{
			this.SendPropertyChanging();
			entity.OccupationMaster = this;
		}
		
		private void detach_OccupationReportFields(OccupationReportField entity)
		{
			this.SendPropertyChanging();
			entity.OccupationMaster = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.OccupationMaster = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.OccupationMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OccupationReportField")]
	public partial class OccupationReportField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OccupationReportFieldID;
		
		private int _OccupationID;
		
		private int _ReportFieldID;
		
		private EntityRef<OccupationMaster> _OccupationMaster;
		
		private EntityRef<ReportFieldMaster> _ReportFieldMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOccupationReportFieldIDChanging(int value);
    partial void OnOccupationReportFieldIDChanged();
    partial void OnOccupationIDChanging(int value);
    partial void OnOccupationIDChanged();
    partial void OnReportFieldIDChanging(int value);
    partial void OnReportFieldIDChanged();
    #endregion
		
		public OccupationReportField()
		{
			this._OccupationMaster = default(EntityRef<OccupationMaster>);
			this._ReportFieldMaster = default(EntityRef<ReportFieldMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OccupationReportFieldID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OccupationReportFieldID
		{
			get
			{
				return this._OccupationReportFieldID;
			}
			set
			{
				if ((this._OccupationReportFieldID != value))
				{
					this.OnOccupationReportFieldIDChanging(value);
					this.SendPropertyChanging();
					this._OccupationReportFieldID = value;
					this.SendPropertyChanged("OccupationReportFieldID");
					this.OnOccupationReportFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OccupationID", DbType="Int NOT NULL")]
		public int OccupationID
		{
			get
			{
				return this._OccupationID;
			}
			set
			{
				if ((this._OccupationID != value))
				{
					if (this._OccupationMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOccupationIDChanging(value);
					this.SendPropertyChanging();
					this._OccupationID = value;
					this.SendPropertyChanged("OccupationID");
					this.OnOccupationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportFieldID", DbType="Int NOT NULL")]
		public int ReportFieldID
		{
			get
			{
				return this._ReportFieldID;
			}
			set
			{
				if ((this._ReportFieldID != value))
				{
					if (this._ReportFieldMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportFieldIDChanging(value);
					this.SendPropertyChanging();
					this._ReportFieldID = value;
					this.SendPropertyChanged("ReportFieldID");
					this.OnReportFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OccupationMaster_OccupationReportField", Storage="_OccupationMaster", ThisKey="OccupationID", OtherKey="OccupationID", IsForeignKey=true)]
		public OccupationMaster OccupationMaster
		{
			get
			{
				return this._OccupationMaster.Entity;
			}
			set
			{
				OccupationMaster previousValue = this._OccupationMaster.Entity;
				if (((previousValue != value) 
							|| (this._OccupationMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OccupationMaster.Entity = null;
						previousValue.OccupationReportFields.Remove(this);
					}
					this._OccupationMaster.Entity = value;
					if ((value != null))
					{
						value.OccupationReportFields.Add(this);
						this._OccupationID = value.OccupationID;
					}
					else
					{
						this._OccupationID = default(int);
					}
					this.SendPropertyChanged("OccupationMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportFieldMaster_OccupationReportField", Storage="_ReportFieldMaster", ThisKey="ReportFieldID", OtherKey="ReportFieldID", IsForeignKey=true)]
		public ReportFieldMaster ReportFieldMaster
		{
			get
			{
				return this._ReportFieldMaster.Entity;
			}
			set
			{
				ReportFieldMaster previousValue = this._ReportFieldMaster.Entity;
				if (((previousValue != value) 
							|| (this._ReportFieldMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportFieldMaster.Entity = null;
						previousValue.OccupationReportFields.Remove(this);
					}
					this._ReportFieldMaster.Entity = value;
					if ((value != null))
					{
						value.OccupationReportFields.Add(this);
						this._ReportFieldID = value.ReportFieldID;
					}
					else
					{
						this._ReportFieldID = default(int);
					}
					this.SendPropertyChanged("ReportFieldMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhysicalConditionReport")]
	public partial class PhysicalConditionReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhysicalConditionReportID;
		
		private System.DateTime _TestDate;
		
		private int _ReportFieldID;
		
		private string _ReportFieldValue;
		
		private int _ClientID;
		
		private int _UserID;
		
		private string _MSKAssessmentImpressions;
		
		private string _Advice;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<ReportFieldMaster> _ReportFieldMaster;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhysicalConditionReportIDChanging(int value);
    partial void OnPhysicalConditionReportIDChanged();
    partial void OnTestDateChanging(System.DateTime value);
    partial void OnTestDateChanged();
    partial void OnReportFieldIDChanging(int value);
    partial void OnReportFieldIDChanged();
    partial void OnReportFieldValueChanging(string value);
    partial void OnReportFieldValueChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnMSKAssessmentImpressionsChanging(string value);
    partial void OnMSKAssessmentImpressionsChanged();
    partial void OnAdviceChanging(string value);
    partial void OnAdviceChanged();
    #endregion
		
		public PhysicalConditionReport()
		{
			this._Client = default(EntityRef<Client>);
			this._ReportFieldMaster = default(EntityRef<ReportFieldMaster>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalConditionReportID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PhysicalConditionReportID
		{
			get
			{
				return this._PhysicalConditionReportID;
			}
			set
			{
				if ((this._PhysicalConditionReportID != value))
				{
					this.OnPhysicalConditionReportIDChanging(value);
					this.SendPropertyChanging();
					this._PhysicalConditionReportID = value;
					this.SendPropertyChanged("PhysicalConditionReportID");
					this.OnPhysicalConditionReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestDate", DbType="Date NOT NULL")]
		public System.DateTime TestDate
		{
			get
			{
				return this._TestDate;
			}
			set
			{
				if ((this._TestDate != value))
				{
					this.OnTestDateChanging(value);
					this.SendPropertyChanging();
					this._TestDate = value;
					this.SendPropertyChanged("TestDate");
					this.OnTestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportFieldID", DbType="Int NOT NULL")]
		public int ReportFieldID
		{
			get
			{
				return this._ReportFieldID;
			}
			set
			{
				if ((this._ReportFieldID != value))
				{
					if (this._ReportFieldMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportFieldIDChanging(value);
					this.SendPropertyChanging();
					this._ReportFieldID = value;
					this.SendPropertyChanged("ReportFieldID");
					this.OnReportFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportFieldValue", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ReportFieldValue
		{
			get
			{
				return this._ReportFieldValue;
			}
			set
			{
				if ((this._ReportFieldValue != value))
				{
					this.OnReportFieldValueChanging(value);
					this.SendPropertyChanging();
					this._ReportFieldValue = value;
					this.SendPropertyChanged("ReportFieldValue");
					this.OnReportFieldValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MSKAssessmentImpressions", DbType="NVarChar(MAX)")]
		public string MSKAssessmentImpressions
		{
			get
			{
				return this._MSKAssessmentImpressions;
			}
			set
			{
				if ((this._MSKAssessmentImpressions != value))
				{
					this.OnMSKAssessmentImpressionsChanging(value);
					this.SendPropertyChanging();
					this._MSKAssessmentImpressions = value;
					this.SendPropertyChanged("MSKAssessmentImpressions");
					this.OnMSKAssessmentImpressionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Advice", DbType="NVarChar(MAX)")]
		public string Advice
		{
			get
			{
				return this._Advice;
			}
			set
			{
				if ((this._Advice != value))
				{
					this.OnAdviceChanging(value);
					this.SendPropertyChanging();
					this._Advice = value;
					this.SendPropertyChanged("Advice");
					this.OnAdviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_PhysicalConditionReport", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.PhysicalConditionReports.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.PhysicalConditionReports.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportFieldMaster_PhysicalConditionReport", Storage="_ReportFieldMaster", ThisKey="ReportFieldID", OtherKey="ReportFieldID", IsForeignKey=true)]
		public ReportFieldMaster ReportFieldMaster
		{
			get
			{
				return this._ReportFieldMaster.Entity;
			}
			set
			{
				ReportFieldMaster previousValue = this._ReportFieldMaster.Entity;
				if (((previousValue != value) 
							|| (this._ReportFieldMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportFieldMaster.Entity = null;
						previousValue.PhysicalConditionReports.Remove(this);
					}
					this._ReportFieldMaster.Entity = value;
					if ((value != null))
					{
						value.PhysicalConditionReports.Add(this);
						this._ReportFieldID = value.ReportFieldID;
					}
					else
					{
						this._ReportFieldID = default(int);
					}
					this.SendPropertyChanged("ReportFieldMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PhysicalConditionReport", Storage="_User", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PhysicalConditionReports.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PhysicalConditionReports.Add(this);
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportFieldMaster")]
	public partial class ReportFieldMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportFieldID;
		
		private string _ReportFieldName;
		
		private int _ReportTypeID;
		
		private EntitySet<UserReportField> _UserReportFields;
		
		private EntitySet<DietPlanReport> _DietPlanReports;
		
		private EntitySet<LabReport> _LabReports;
		
		private EntitySet<OccupationReportField> _OccupationReportFields;
		
		private EntitySet<PhysicalConditionReport> _PhysicalConditionReports;
		
		private EntityRef<ReportTypeMaster> _ReportTypeMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportFieldIDChanging(int value);
    partial void OnReportFieldIDChanged();
    partial void OnReportFieldNameChanging(string value);
    partial void OnReportFieldNameChanged();
    partial void OnReportTypeIDChanging(int value);
    partial void OnReportTypeIDChanged();
    #endregion
		
		public ReportFieldMaster()
		{
			this._UserReportFields = new EntitySet<UserReportField>(new Action<UserReportField>(this.attach_UserReportFields), new Action<UserReportField>(this.detach_UserReportFields));
			this._DietPlanReports = new EntitySet<DietPlanReport>(new Action<DietPlanReport>(this.attach_DietPlanReports), new Action<DietPlanReport>(this.detach_DietPlanReports));
			this._LabReports = new EntitySet<LabReport>(new Action<LabReport>(this.attach_LabReports), new Action<LabReport>(this.detach_LabReports));
			this._OccupationReportFields = new EntitySet<OccupationReportField>(new Action<OccupationReportField>(this.attach_OccupationReportFields), new Action<OccupationReportField>(this.detach_OccupationReportFields));
			this._PhysicalConditionReports = new EntitySet<PhysicalConditionReport>(new Action<PhysicalConditionReport>(this.attach_PhysicalConditionReports), new Action<PhysicalConditionReport>(this.detach_PhysicalConditionReports));
			this._ReportTypeMaster = default(EntityRef<ReportTypeMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportFieldID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReportFieldID
		{
			get
			{
				return this._ReportFieldID;
			}
			set
			{
				if ((this._ReportFieldID != value))
				{
					this.OnReportFieldIDChanging(value);
					this.SendPropertyChanging();
					this._ReportFieldID = value;
					this.SendPropertyChanged("ReportFieldID");
					this.OnReportFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportFieldName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string ReportFieldName
		{
			get
			{
				return this._ReportFieldName;
			}
			set
			{
				if ((this._ReportFieldName != value))
				{
					this.OnReportFieldNameChanging(value);
					this.SendPropertyChanging();
					this._ReportFieldName = value;
					this.SendPropertyChanged("ReportFieldName");
					this.OnReportFieldNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportTypeID", DbType="Int NOT NULL")]
		public int ReportTypeID
		{
			get
			{
				return this._ReportTypeID;
			}
			set
			{
				if ((this._ReportTypeID != value))
				{
					if (this._ReportTypeMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ReportTypeID = value;
					this.SendPropertyChanged("ReportTypeID");
					this.OnReportTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportFieldMaster_UserReportField", Storage="_UserReportFields", ThisKey="ReportFieldID", OtherKey="ReportFieldID")]
		public EntitySet<UserReportField> UserReportFields
		{
			get
			{
				return this._UserReportFields;
			}
			set
			{
				this._UserReportFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportFieldMaster_DietPlanReport", Storage="_DietPlanReports", ThisKey="ReportFieldID", OtherKey="ReportFieldID")]
		public EntitySet<DietPlanReport> DietPlanReports
		{
			get
			{
				return this._DietPlanReports;
			}
			set
			{
				this._DietPlanReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportFieldMaster_LabReport", Storage="_LabReports", ThisKey="ReportFieldID", OtherKey="ReportFieldID")]
		public EntitySet<LabReport> LabReports
		{
			get
			{
				return this._LabReports;
			}
			set
			{
				this._LabReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportFieldMaster_OccupationReportField", Storage="_OccupationReportFields", ThisKey="ReportFieldID", OtherKey="ReportFieldID")]
		public EntitySet<OccupationReportField> OccupationReportFields
		{
			get
			{
				return this._OccupationReportFields;
			}
			set
			{
				this._OccupationReportFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportFieldMaster_PhysicalConditionReport", Storage="_PhysicalConditionReports", ThisKey="ReportFieldID", OtherKey="ReportFieldID")]
		public EntitySet<PhysicalConditionReport> PhysicalConditionReports
		{
			get
			{
				return this._PhysicalConditionReports;
			}
			set
			{
				this._PhysicalConditionReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportTypeMaster_ReportFieldMaster", Storage="_ReportTypeMaster", ThisKey="ReportTypeID", OtherKey="ReportTypeID", IsForeignKey=true)]
		public ReportTypeMaster ReportTypeMaster
		{
			get
			{
				return this._ReportTypeMaster.Entity;
			}
			set
			{
				ReportTypeMaster previousValue = this._ReportTypeMaster.Entity;
				if (((previousValue != value) 
							|| (this._ReportTypeMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportTypeMaster.Entity = null;
						previousValue.ReportFieldMasters.Remove(this);
					}
					this._ReportTypeMaster.Entity = value;
					if ((value != null))
					{
						value.ReportFieldMasters.Add(this);
						this._ReportTypeID = value.ReportTypeID;
					}
					else
					{
						this._ReportTypeID = default(int);
					}
					this.SendPropertyChanged("ReportTypeMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserReportFields(UserReportField entity)
		{
			this.SendPropertyChanging();
			entity.ReportFieldMaster = this;
		}
		
		private void detach_UserReportFields(UserReportField entity)
		{
			this.SendPropertyChanging();
			entity.ReportFieldMaster = null;
		}
		
		private void attach_DietPlanReports(DietPlanReport entity)
		{
			this.SendPropertyChanging();
			entity.ReportFieldMaster = this;
		}
		
		private void detach_DietPlanReports(DietPlanReport entity)
		{
			this.SendPropertyChanging();
			entity.ReportFieldMaster = null;
		}
		
		private void attach_LabReports(LabReport entity)
		{
			this.SendPropertyChanging();
			entity.ReportFieldMaster = this;
		}
		
		private void detach_LabReports(LabReport entity)
		{
			this.SendPropertyChanging();
			entity.ReportFieldMaster = null;
		}
		
		private void attach_OccupationReportFields(OccupationReportField entity)
		{
			this.SendPropertyChanging();
			entity.ReportFieldMaster = this;
		}
		
		private void detach_OccupationReportFields(OccupationReportField entity)
		{
			this.SendPropertyChanging();
			entity.ReportFieldMaster = null;
		}
		
		private void attach_PhysicalConditionReports(PhysicalConditionReport entity)
		{
			this.SendPropertyChanging();
			entity.ReportFieldMaster = this;
		}
		
		private void detach_PhysicalConditionReports(PhysicalConditionReport entity)
		{
			this.SendPropertyChanging();
			entity.ReportFieldMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportTypeMaster")]
	public partial class ReportTypeMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportTypeID;
		
		private string _ReportTypeName;
		
		private EntitySet<ReportFieldMaster> _ReportFieldMasters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportTypeIDChanging(int value);
    partial void OnReportTypeIDChanged();
    partial void OnReportTypeNameChanging(string value);
    partial void OnReportTypeNameChanged();
    #endregion
		
		public ReportTypeMaster()
		{
			this._ReportFieldMasters = new EntitySet<ReportFieldMaster>(new Action<ReportFieldMaster>(this.attach_ReportFieldMasters), new Action<ReportFieldMaster>(this.detach_ReportFieldMasters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReportTypeID
		{
			get
			{
				return this._ReportTypeID;
			}
			set
			{
				if ((this._ReportTypeID != value))
				{
					this.OnReportTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ReportTypeID = value;
					this.SendPropertyChanged("ReportTypeID");
					this.OnReportTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportTypeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ReportTypeName
		{
			get
			{
				return this._ReportTypeName;
			}
			set
			{
				if ((this._ReportTypeName != value))
				{
					this.OnReportTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ReportTypeName = value;
					this.SendPropertyChanged("ReportTypeName");
					this.OnReportTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportTypeMaster_ReportFieldMaster", Storage="_ReportFieldMasters", ThisKey="ReportTypeID", OtherKey="ReportTypeID")]
		public EntitySet<ReportFieldMaster> ReportFieldMasters
		{
			get
			{
				return this._ReportFieldMasters;
			}
			set
			{
				this._ReportFieldMasters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportFieldMasters(ReportFieldMaster entity)
		{
			this.SendPropertyChanging();
			entity.ReportTypeMaster = this;
		}
		
		private void detach_ReportFieldMasters(ReportFieldMaster entity)
		{
			this.SendPropertyChanging();
			entity.ReportTypeMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private string _UserPhone;
		
		private string _UserAddress;
		
		private string _Password;
		
		private int _OccupationID;
		
		private EntitySet<UserReportField> _UserReportFields;
		
		private EntitySet<Client> _Clients;
		
		private EntitySet<DietPlanReport> _DietPlanReports;
		
		private EntitySet<LabReport> _LabReports;
		
		private EntitySet<PhysicalConditionReport> _PhysicalConditionReports;
		
		private EntityRef<OccupationMaster> _OccupationMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserPhoneChanging(string value);
    partial void OnUserPhoneChanged();
    partial void OnUserAddressChanging(string value);
    partial void OnUserAddressChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnOccupationIDChanging(int value);
    partial void OnOccupationIDChanged();
    #endregion
		
		public User()
		{
			this._UserReportFields = new EntitySet<UserReportField>(new Action<UserReportField>(this.attach_UserReportFields), new Action<UserReportField>(this.detach_UserReportFields));
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			this._DietPlanReports = new EntitySet<DietPlanReport>(new Action<DietPlanReport>(this.attach_DietPlanReports), new Action<DietPlanReport>(this.detach_DietPlanReports));
			this._LabReports = new EntitySet<LabReport>(new Action<LabReport>(this.attach_LabReports), new Action<LabReport>(this.detach_LabReports));
			this._PhysicalConditionReports = new EntitySet<PhysicalConditionReport>(new Action<PhysicalConditionReport>(this.attach_PhysicalConditionReports), new Action<PhysicalConditionReport>(this.detach_PhysicalConditionReports));
			this._OccupationMaster = default(EntityRef<OccupationMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPhone", DbType="VarChar(15)")]
		public string UserPhone
		{
			get
			{
				return this._UserPhone;
			}
			set
			{
				if ((this._UserPhone != value))
				{
					this.OnUserPhoneChanging(value);
					this.SendPropertyChanging();
					this._UserPhone = value;
					this.SendPropertyChanged("UserPhone");
					this.OnUserPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAddress", DbType="NVarChar(MAX)")]
		public string UserAddress
		{
			get
			{
				return this._UserAddress;
			}
			set
			{
				if ((this._UserAddress != value))
				{
					this.OnUserAddressChanging(value);
					this.SendPropertyChanging();
					this._UserAddress = value;
					this.SendPropertyChanged("UserAddress");
					this.OnUserAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OccupationID", DbType="Int NOT NULL")]
		public int OccupationID
		{
			get
			{
				return this._OccupationID;
			}
			set
			{
				if ((this._OccupationID != value))
				{
					if (this._OccupationMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOccupationIDChanging(value);
					this.SendPropertyChanging();
					this._OccupationID = value;
					this.SendPropertyChanged("OccupationID");
					this.OnOccupationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserReportField", Storage="_UserReportFields", ThisKey="UserId", OtherKey="UserID")]
		public EntitySet<UserReportField> UserReportFields
		{
			get
			{
				return this._UserReportFields;
			}
			set
			{
				this._UserReportFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Client", Storage="_Clients", ThisKey="UserId", OtherKey="UserID")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DietPlanReport", Storage="_DietPlanReports", ThisKey="UserId", OtherKey="UserID")]
		public EntitySet<DietPlanReport> DietPlanReports
		{
			get
			{
				return this._DietPlanReports;
			}
			set
			{
				this._DietPlanReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LabReport", Storage="_LabReports", ThisKey="UserId", OtherKey="UserID")]
		public EntitySet<LabReport> LabReports
		{
			get
			{
				return this._LabReports;
			}
			set
			{
				this._LabReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PhysicalConditionReport", Storage="_PhysicalConditionReports", ThisKey="UserId", OtherKey="UserID")]
		public EntitySet<PhysicalConditionReport> PhysicalConditionReports
		{
			get
			{
				return this._PhysicalConditionReports;
			}
			set
			{
				this._PhysicalConditionReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OccupationMaster_User", Storage="_OccupationMaster", ThisKey="OccupationID", OtherKey="OccupationID", IsForeignKey=true)]
		public OccupationMaster OccupationMaster
		{
			get
			{
				return this._OccupationMaster.Entity;
			}
			set
			{
				OccupationMaster previousValue = this._OccupationMaster.Entity;
				if (((previousValue != value) 
							|| (this._OccupationMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OccupationMaster.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._OccupationMaster.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._OccupationID = value.OccupationID;
					}
					else
					{
						this._OccupationID = default(int);
					}
					this.SendPropertyChanged("OccupationMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserReportFields(UserReportField entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserReportFields(UserReportField entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_DietPlanReports(DietPlanReport entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_DietPlanReports(DietPlanReport entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_LabReports(LabReport entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_LabReports(LabReport entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PhysicalConditionReports(PhysicalConditionReport entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PhysicalConditionReports(PhysicalConditionReport entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
